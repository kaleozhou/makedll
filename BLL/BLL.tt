<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#>
 
 <#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\MODEL\MODEL.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;

namespace BLL
{
<#

// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    //fileManager.StartNewFile(entity.Name + "RepositoryExt.cs");
    //BeginNamespace(namespaceName, code);
    
#>
	public partial class <#=entity.Name#> : BaseBLL<MODEL.<#=entity.Name#>>
    {

    }
<#}#>
	
	public  class IBLL
    {
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
#>
		public BLL.<#=entity.Name#> I_<#=entity.Name#>=null;		
<#}#>
// Emit Entity Types
		public IBLL()
		{
		<#
		foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
		{
		#>
		I_<#=entity.Name#>=new BLL.<#=entity.Name#>();				
<#}#>
		}
	}
	
}